import asyncio

import loguru
from grpclib.server import Server
from grpclib.utils import graceful_exit

from example.proto import protoc as t


# generated by protoc


class Test(t.PackageServiceBase):

    async def get_test(self, test: t.TestStructDto = None) -> t.TestStructResponse:
        loguru.logger.warning(test)
        return t.TestStructResponse(test=t.TestStructResp(data=""))


async def main(*, host='127.0.0.1', port=50051):
    server = Server([Test()])
    # Note: graceful_exit isn't supported in Windows
    with graceful_exit([server]):
        await server.start(host, port)
        print(f'Serving on {host}:{port}')
        await server.wait_closed()


if __name__ == '__main__':
    asyncio.run(main())
