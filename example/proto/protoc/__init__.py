# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: test.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


@dataclass(eq=False, repr=False)
class TestStructDto(betterproto.Message):
    data: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class TestStructResp(betterproto.Message):
    data: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class TestStructRequest(betterproto.Message):
    test: "TestStructDto" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class TestStructResponse(betterproto.Message):
    test: "TestStructResp" = betterproto.message_field(1)


class PackageServiceStub(betterproto.ServiceStub):
    async def get_test(self, *, test: "TestStructDto" = None) -> "TestStructResponse":
        request = TestStructRequest()
        if test is not None:
            request.test = test

        return await self._unary_unary(
            "/test.PackageService/GetTest", request, TestStructResponse
        )


class PackageServiceBase(ServiceBase):
    async def get_test(self, test: "TestStructDto") -> "TestStructResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_test(self, stream: grpclib.server.Stream) -> None:
        request = await stream.recv_message()

        request_kwargs = {
            "test": request.test,
        }

        response = await self.get_test(**request_kwargs)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/test.PackageService/GetTest": grpclib.const.Handler(
                self.__rpc_get_test,
                grpclib.const.Cardinality.UNARY_UNARY,
                TestStructRequest,
                TestStructResponse,
            ),
        }
